step 1
1st user	- create repo on github
		- mkdir repo
		- git init
		- git commit stuff
		- git remote add origin git@github.com:user_xxx/repo.git
		- git push -u origin master

step 2
2nd user	- git clone git@github.com:user_xxx/repo.git
		- git config --global user.name "user_yyy"
  		- git config --global user.email "user_yyy@mail.com"
  		- git config --list
		- git commit -a -m "update README"
		- git push origin master
step 7
2nd user	- git branch
		- git checkout master
		- git checkout -b story_y
		- update README
		- git add README
		- git commit -v
		- git push origin story_y
		- git branch --set-upstream story_y origin/story_y

step 9
2nd user	- vi story_y
		- git add story_y
		- git commit -a -m 'add story_y'

step 10
1st user	- git checkout story_y
		- git pull
		- update README
		- update story_y.txt
		- git commit -a -m 'add changes for story y'
		- git push origin story_y
		- do pull request on github
======
2nd user	- reviews pull request
		- approves
		- does the merge and closes the pull requestA
step 11
2nd user	- git checkout master
		- git branch -d story_y
		- git push origin :story_y
======
1st user	- git checkout master
		- git pull
		- git remote prune origin		# remove tracking of deleted remote branches - story_y 
		- git branch -d story_y			# delete local branch story_y
===============
step 17 (scenario when master is changed before pull request for story_x is completed)
1st user	- git checkout master
		- git checkout -b hotfix_a		# create new branch - hotfix
		- update README
		- git commit -a -v
		- git push origin hotfix_a
		- pull request to merge to master
		- approved
		- merged and closed
		- git checkout master
		- git branch -d hotfix_a
		- git push origin :hotfix_a
